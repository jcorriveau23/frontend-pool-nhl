#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('pool-jdope:server');
var http = require('http');
const jwt = require('jsonwebtoken');
const axios = require('axios');

const util = require('../controllers/util');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var server = http.createServer(app);
const io = require('socket.io')(server, {
  path: '/mysocket',
  cors: {
    origin: 'https://hockeypool.live',
    methods: ['GET', 'POST'],
  },
});
/**
 * Create HTTP server.
 */

var pools = {};

const userSocketIdMap = new Map();

io.on('connection', function (socket) {
  //console.log('Client connected with socket ID: '+ socket.client.id);

  socket.on('joinRoom', function (data, room) {
    let token = jwt.decode(data, util.PRIVATE_KEY_DB);

    if (token !== null) {
      //TODO: valide token._id is a registered client in db

      if (pools[room] == undefined) {
        pools[room] = {};
        pools[room]['numClients'] = 1;
        pools[room]['listClient'] = [{ _id: token._id, ready: false }];

        socket.join(room);
        addClientToMap(token._id, socket.id);

        io.in(room).emit('roomData', pools[room]['listClient']);
      } else {
        if (pools[room]['listClient'].findIndex(e => e._id === token._id) !== -1) {
          // already in the room
          socket.join(room); // still add the duplicate socket
          addClientToMap(token._id, socket.id);

          io.in(room).emit('roomData', pools[room]['listClient']);
        } else if (pools[room]['numClients'] > 5) {
          // dont add it
        } else {
          pools[room]['numClients']++;
          pools[room]['listClient'].push({ _id: token._id, ready: false });
          socket.join(room); // still add the duplicate socket
          addClientToMap(token._id, socket.id);

          io.in(room).emit('roomData', pools[room]['listClient']);
        }
      }
      //console.log(token._id + " join room: " + room);
      //console.log("in Room now: " + pools[room]["listClient"])
    }
  });

  socket.on('leaveRoom', function (data, room) {
    let token = jwt.decode(data);

    if (token !== null) {
      socket.leave(room);
      //console.log(socket.id + " leave room: " + room);

      if (removeClientFromMap(token._id, socket.id)) {
        var index = pools[room]['listClient'].findIndex(e => e._id === token._id);
        if (index > -1) {
          pools[room]['listClient'].splice(index, 1);
          pools[room]['numClients']--;

          io.in(room).emit('roomData', pools[room]['listClient']);

          //console.log(token._id + " leave room: " + room);
          if (pools[room]['numClients'] === 0) {
            pools[room] = undefined;
            //console.log("room: " + room + "closed" )
            return;
          }
        }
      }
      //console.log("in Room now: " + pools[room]["listClient"])
    }
  });

  socket.on('playerReady', function (data, room) {
    let token = jwt.decode(data, util.PRIVATE_KEY_DB);

    var index = pools[room]['listClient'].findIndex(e => e._id === token._id);

    if (index > -1) {
      console.log('im ready: ' + token._id);
      pools[room]['listClient'][index].ready = true;

      io.in(room).emit('roomData', pools[room]['listClient']);
    }
  });

  socket.on('playerNotReady', function (data, room) {
    let token = jwt.decode(data, util.PRIVATE_KEY_DB);

    var index = pools[room]['listClient'].findIndex(e => e._id === token._id);

    if (index > -1) {
      pools[room]['listClient'][index].ready = false;

      io.in(room).emit('roomData', pools[room]['listClient']);
    }
  });

  socket.on('changeRule', function (data, pool_info) {
    let token = jwt.decode(data, util.PRIVATE_KEY_DB);

    var index = pools[pool_info.name]['listClient'].findIndex(e => e._id === token._id);

    if (index > -1 && pool_info.owner === token._id) {
      io.in(pool_info.name).emit('poolInfo', pool_info);
    }
  });

  socket.on('startDraft', function (data, room) {
    for (i = 0; i < pools[room]['listClient'].length; i++) {
      if (pools[room]['listClient'][i].ready === false) {
        console.log('not every body ready');
        return;
      }
    }

    axios
      .put('/api/pool/start_draft', {
        token: data,
        pool_name: room,
        participants: pools[room]['listClient'],
      })
      .then(res => {
        if (res.data.success) {
          io.in(room).emit('poolInfo', res.data.message);
        } else {
          console.error(res.data.message);
        }
      })
      .catch(e => console.error(e));
  });

  socket.on('pickPlayer', function (data, room, player, callback) {
    axios
      .put('/api/pool/chose_player', {
        token: data,
        pool_name: room,
        player,
      })
      .then(res => {
        if (res.data.success) {
          io.in(room).emit('poolInfo', res.data.message);
          callback({ success: true, message: res.data.message });
        } else {
          //console.log('error with put request (chose_player)' + data.message)
          callback({ success: false, message: res.data.message });
        }
      });
  });

  socket.on('disconnect', () => {
    //console.log("device disconnected")
  });
});

function addClientToMap(userName, socketId) {
  if (!userSocketIdMap.has(userName)) {
    //when user is joining first time
    userSocketIdMap.set(userName, new Set([socketId]));
  } else {
    //user had already joined from one client and now joining using another client
    userSocketIdMap.get(userName).add(socketId);
  }
}

function removeClientFromMap(userName, socketId) {
  if (userSocketIdMap.has(userName)) {
    let userSocketIdSet = userSocketIdMap.get(userName);
    userSocketIdSet.delete(socketId);
    //if there are no clients for a user, remove that user from online
    if (userSocketIdSet.size == 0) {
      userSocketIdMap.delete(userName);
      return true;
    }
    return false;
  }
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, '0.0.0.0');
server.on('error', onError);
server.on('listening', onListening);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
