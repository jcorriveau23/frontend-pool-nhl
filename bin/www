#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('pool-jdope:server');
var http = require('http');
const jwt = require('jsonwebtoken')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var server = http.createServer(app);
const io = require("socket.io")(server, {
  cors: {
    origin: "http://localhost:3000",
    methods: ["GET", "POST"]
  }
});
/**
 * Create HTTP server.
 */


//const io = socketIo(server);

let interval;
var pools = {}

const userSocketIdMap = new Map()

io.on('connection', function(socket){
  console.log('Client connected with socket ID: '+ socket.client.id);

  socket.on('joinRoom', function(data, room){
    let token = jwt.decode(data, 'verySecretValue')
    socket.join(room)
    addClientToMap(token.name, socket.id)
    if(pools[room] == undefined){
      pools[room] = {}
      pools[room]["numClients"] = 1;
      pools[room]["listClient"] = [token.name]
      io.in(room).emit("roomData", pools[room]["listClient"])
    }
    else{
      if(pools[room]["listClient"].includes(token.name)){
        // do nothing
      }
      else if(pools[room]["numClients"] > 5){
        // dont add it
      }
      else{
        pools[room]["numClients"]++
        pools[room]["listClient"].push(token.name)
        io.in(room).emit("roomData", pools[room]["listClient"])
      }
    }
      
    console.log(token.name + " join room: " + room);
    console.log("in Room now: " + pools[room]["listClient"])
  });

  socket.on('leaveRoom', function(data, room){
    let token = jwt.decode(data, 'verySecretValue')
    socket.leave(room)
    console.log(socket.id + " leave room: " + room);

    if(removeClientFromMap(token.name, socket.id)){
      
      var index = pools[room]["listClient"].indexOf(token.name)
      if(index > -1){
        pools[room]["listClient"].splice(index, 1)
        pools[room]["numClients"]--
        
        io.in(room).emit("roomData", pools[room]["listClient"])

        console.log(token.name + " leave room: " + room);
        if(pools[room]["numClients"] === 0){
          pools[room] = undefined
          console.log("room: " + room + "closed" )
          return
        }
      }
    }
    console.log("in Room now: " + pools[room]["listClient"])
  });

  socket.on('disconnect', () => {
    console.log("device disconnected")
    // TODO, make client leave room
  });
});


function addClientToMap(userName, socketId){
  if (!userSocketIdMap.has(userName)) {
  //when user is joining first time
  userSocketIdMap.set(userName, new Set([socketId]));
  } else{
  //user had already joined from one client and now joining using another client
  userSocketIdMap.get(userName).add(socketId);
  }
}

function removeClientFromMap(userName, socketId){
  if (userSocketIdMap.has(userName)) {
    let userSocketIdSet = userSocketIdMap.get(userName);
    userSocketIdSet.delete(socketId);
    //if there are no clients for a user, remove that user from online
    if (userSocketIdSet.size == 0 ) {
      userSocketIdMap.delete(userName);
    return true
    }
    return false
  }
}


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => console.log(`Listening on port ${port}`));
server.on('error', onError);
server.on('listening', onListening);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
